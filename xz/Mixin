Mixin
JavaScript 语言的设计是单一继承，即子类只能继承一个父类，不允许继承多个父类。这种设计保证了对象继
承的层次结构是树状的，而不是复杂的网状结构。
但是，这大大降低了编程的灵活性。因为实际开发中，有时不可避免，子类需要继承多个父类。举例来
说， “ 猫 ” 可以继承 “ 哺乳类动物 ” ，也可以继承 “ 宠物 ” 。
各种单一继承的编程语言，有不同的多重继承解决方案。比如， Java 语言也是子类只能继承一个父类，但是
还允许继承多个界面（ interface ），这样就间接实现了多重继承。 Interface 与父类一样，也是一个类，只不过
它只定义接口（ method signature ），不定义实现，因此又被称为 “ 抽象类 ” 。凡是继承于 Interface 的方法，都必
须自己定义实现，否则就会报错。这样就避免了多重继承的最大问题：多个父类的同名方法的碰撞（ naming
collision ）。
JavaScript 语言没有采用 Interface 的方案，而是通过代理（ delegation ）实现了从其他类引入方法。