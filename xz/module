Module
ES6 的 Class 只是面向对象编程的语法糖，升级了 ES5 的构造函数的原型链继承的写法，并没有解决模块化问
题。 Module 功能就是为了解决这个问题而提出的。
历史上， JavaScript 一直没有模块（ module ）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的
方法拼装起来。其他语言都有这项功能，比如 Ruby 的 require  、 Python 的 import  ，甚至就连 CSS 都
有 @import  ，但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。
在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用
于浏览器。 ES6 在语言规格的层面上，实现了模块功能，而且实现得相当简单，完全可以取代现有的
CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。
ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。
CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如， CommonJS 模块就是对象，输入时必须查找
对象属性
