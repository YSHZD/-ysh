ES5 对空位的处理，已经很不一致了，大多数情况下会忽略空位。
forEach()  ,  filter()  ,  every()  和 some()  都会跳过空位。
map()  会跳过空位，但会保留这个值
join()  和 toString()  会将空位视为 undefined  ，而 undefined  和 null  会被处理成空字符
串。
// forEach 方法
[,'a'].forEach((x,i) => log(i)); // 1
// filter 方法
['a',,'b'].filter(x => true) // ['a','b']
// every 方法
[,'a'].every(x => x==='a') // true
// some 方法
[,'a'].some(x => x !== 'a') // false
// map 方法
[,'a'].map(x => 1) // [,1]
// join 方法
[,'a',undefined,null].join('#') // "#a##"
// toString 方法
[,'a',undefined,null].toString() // ",a,,"

ES6 则是明确将空位转为 undefined  。
Array.from  方法会将数组的空位，转为 undefined  ，也就是说，这个方法不会忽略空位。
Array.from(['a',,'b'])
// [ "a", undefined, "b" ]
扩展运算符（ ...  ）也会将空位转为 undefined  。
[...['a',,'b']]
// [ "a", undefined, "b" ]
copyWithin()  会连空位一起拷贝。
[,'a','b',,].copyWithin(2,0) // [,"a",,"a"]
fill()  会将空位视为正常的数组位置。
new Array(3).fill('a') // ["a","a","a"]
for...of  循环也会遍历空位。
let arr = [, ,];
for (let i of arr) {
console.log(1);
}
// 1
// 1
上面代码中，数组 arr  有两个空位， for...of  并没有忽略它们。如果改成 map  方法遍历，空位是会跳
过的。
entries()  、 keys()  、 values()  、 find()  和 findIndex()  会将空位处理成 undefined  。
// entries()
[...[,'a'].entries()] // [[0,undefined], [1,"a"]]
// keys()
[...[,'a'].keys()] // [0,1]
// values()
[...[,'a'].values()] // [undefined,"a"]
// find()
[,'a'].find(x => true) // undefined
// findIndex()
[,'a'].findIndex(x => true) // 0
由于空位的处理规则非常不统一，所以建议避免出现空位。