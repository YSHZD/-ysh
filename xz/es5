ES5 对空位的处理，已经很不一致了，大多数情况下会忽略空位。
forEach()  ,  filter()  ,  every()  和 some()  都会跳过空位。
map()  会跳过空位，但会保留这个值
join()  和 toString()  会将空位视为 undefined  ，而 undefined  和 null  会被处理成空字符
串。
// forEach 方法
[,'a'].forEach((x,i) => log(i)); // 1
// filter 方法
['a',,'b'].filter(x => true) // ['a','b']
// every 方法
[,'a'].every(x => x==='a') // true
// some 方法
[,'a'].some(x => x !== 'a') // false
// map 方法
[,'a'].map(x => 1) // [,1]
// join 方法
[,'a',undefined,null].join('#') // "#a##"
// toString 方法
[,'a',undefined,null].toString() // ",a,,"

ES6 则是明确将空位转为 undefined  。
Array.from  方法会将数组的空位，转为 undefined  ，也就是说，这个方法不会忽略空位。
Array.from(['a',,'b'])
// [ "a", undefined, "b" ]
扩展运算符（ ...  ）也会将空位转为 undefined  。
[...['a',,'b']]
// [ "a", undefined, "b" ]
copyWithin()  会连空位一起拷贝。
[,'a','b',,].copyWithin(2,0) // [,"a",,"a"]
fill()  会将空位视为正常的数组位置。
new Array(3).fill('a') // ["a","a","a"]
for...of  循环也会遍历空位。
let arr = [, ,];
for (let i of arr) {
console.log(1);
}
// 1
// 1
上面代码中，数组 arr  有两个空位， for...of  并没有忽略它们。如果改成 map  方法遍历，空位是会跳
过的。
entries()  、 keys()  、 values()  、 find()  和 findIndex()  会将空位处理成 undefined  。
// entries()
[...[,'a'].entries()] // [[0,undefined], [1,"a"]]
// keys()
[...[,'a'].keys()] // [0,1]
// values()
[...[,'a'].values()] // [undefined,"a"]
// find()
[,'a'].find(x => true) // undefined
// findIndex()
[,'a'].findIndex(x => true) // 0
由于空位的处理规则非常不统一，所以建议避免出现空位。

函数的 length 属性
指定了默认值以后，函数的 length  属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值
后， length  属性将失真。
(function (a) {}).length // 1
(function (a = 5) {}).length // 0
(function (a, b, c = 5) {}).length // 2
上面代码中， length  属性的返回值，等于函数的参数个数减去指定了默认值的参数个数。比如，上面最后
一个函数，定义了 3 个参数，其中有一个参数 c  指定了默认值，因此 length  属性等于 3  减去 1  ，最后
得到 2  

这是因为 length  属性的含义是，该函数预期传入的参数个数。某个参数指定默认值以后，预期传入的参数
个数就不包括这个参数了。同理， rest 参数也不会计入 length  属性。
(function(...args) {}).length // 0
如果设置了默认值的参数不是尾参数，那么 length  属性也不再计入后面的参数了。
(function (a = 0, b, c) {}).length // 0
(function (a, b = 1, c) {}).length // 1

rest 参数
ES6 引入 rest 参数（形式为 “... 变量名 ” ），用于获取函数的多余参数，这样就不需要使用 arguments 对象了。 rest
参数搭配的变量是一个数组，该变量将多余的参数放入数组中。
function add(...values) {
let sum = 0;
for (var val of values) {
sum += val;
}
return sum;
}
add(2, 5, 3) // 10
上面代码的 add 函数是一个求和函数，利用 rest 参数，可以向该函数传入任意数目的参数。

rest 参数中的变量代表一个数组，所以数组特有的方法都可以用于这个变量。下面是一个利用 rest 参数改写数
组 push 方法的例子。
function push(array, ...items) {
items.forEach(function(item) {
array.push(item);
console.log(item);
});
}
var a = [];
push(a, 1, 2, 3)
注意， rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。
扩展运算符
含义
扩展运算符（ spread ）是三个点（ ...  ）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序
列。
function add(x, y) {
return x + y;
}
var numbers = [4, 38];
add(...numbers)

// ES5 的写法
function f(x, y, z) {
// ...
}
var args = [0, 1, 2];
f.apply(null, args);
// ES6 的写法
function f(x, y, z) {
// ...
}
var args = [0, 1, 2];
f(...args)

下面是扩展运算符取代 apply  方法的一个实际的例子，应用 Math.max  方法，简化求出一个数组最大元素
的写法。
// ES5 的写法
Math.max.apply(null, [14, 3, 77])
// ES6 的写法
Math.max(...[14, 3, 77])
//  等同于
Math.max(14, 3, 77);

// ES5 的写法
var arr1 = [0, 1, 2];
var arr2 = [3, 4, 5];
Array.prototype.push.apply(arr1, arr2);
// ES6 的写法
var arr1 = [0, 1, 2];
var arr2 = [3, 4, 5];
arr1.push(...arr2);

// ES5
new (Date.bind.apply(Date, [null, 2015, 1, 1]))
// ES6
new Date(...[2015, 1, 1]);


扩展运算符的应用
（ 1 ）合并数组
扩展运算符提供了数组合并的新写法。
// ES5
[1, 2].concat(more)
// ES6
[1, 2, ...more]
var arr1 = ['a', 'b'];
var arr2 = ['c'];
var arr3 = ['d', 'e'];
// ES5 的合并数组
arr1.concat(arr2, arr3);
// [ 'a', 'b', 'c', 'd', 'e' ]
// ES6 的合并数组
[...arr1, ...arr2, ...arr3]
// [ 'a', 'b', 'c', 'd', 'e' ]
（ 2 ）与解构赋值结合
扩展运算符可以与解构赋值结合起来，用于生成数组。
// ES5
a = list[0], rest = list.slice(1)
// ES6
[a, ...rest] = list
下面是另外一些例子。
const [first, ...rest] = [1, 2, 3, 4, 5];
first // 1
rest // [2, 3, 4, 5]
const [first, ...rest] = [];
first // undefined
rest // []:
const [first, ...rest] = ["foo"];
first // "foo"
rest // []
如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。
const [...butLast, last] = [1, 2, 3, 4, 5];
//  报错
const [first, ...middle, last] = [1, 2, 3, 4, 5];
//  报错
（ 3 ）函数的返回值
JavaScript 的函数只能返回一个值，如果需要返回多个值，只能返回数组或对象。扩展运算符提供了解决这个
问题的一种变通方法。
var dateFields = readDateFields(database);
var d = new Date(...dateFields);
上面代码从数据库取出一行数据，通过扩展运算符，直接将其传入构造函数 Date  。
（ 4 ）字符串
扩展运算符还可以将字符串转为真正的数组。
[...'hello']
// [ "h", "e", "l", "l", "o" ]
上面的写法，有一个重要的好处，那就是能够正确识别 32 位的 Unicode 字符。
'x\uD83D\uDE80y'.length // 4
[...'x\uD83D\uDE80y'].length // 3
上面代码的第一种写法， JavaScript 会将 32 位 Unicode 字符，识别为 2 个字符，采用扩展运算符就没有这个问
题。因此，正确返回字符串长度的函数，可以像下面这样写。
function length(str) {
return [...str].length;
}
length('x\uD83D\uDE80y') // 3
凡是涉及到操作 32 位 Unicode 字符的函数，都有这个问题。因此，最好都用扩展运算符改写。
let str = 'x\uD83D\uDE80y';
str.split('').reverse().join('')
// 'y\uDE80\uD83Dx'
[...str].reverse().join('')
// 'y\uD83D\uDE80x'
上面代码中，如果不用扩展运算符，字符串的 reverse  操作就不正确。
（ 5 ）实现了 Iterator 接口的对象
任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组。
var nodeList = document.querySelectorAll('div');
var array = [...nodeList];
上面代码中， querySelectorAll  方法返回的是一个 nodeList  对象。它不是数组，而是一个类似数组的
对象。这时，扩展运算符可以将其转为真正的数组，原因就在于 NodeList  对象实现了 Iterator 接口。
对于那些没有部署 Iterator 接口的类似数组的对象，扩展运算符就无法将其转为真正的数组。
let arrayLike = {
'0': 'a',
'1': 'b',
'2': 'c',
length: 3
};
// TypeError: Cannot spread non-iterable object.
let arr = [...arrayLike];
上面代码中， arrayLike  是一个类似数组的对象，但是没有部署 Iterator 接口，扩展运算符就会报错。这
时，可以改为使用 Array.from  方法将 arrayLike  转为真正的数组。
（ 6 ） Map 和 Set 结构， Generator 函数
扩展运算符内部调用的是数据结构的 Iterator 接口，因此只要具有 Iterator 接口的对象，都可以使用扩展运算
符，比如 Map 结构。
let map = new Map([
[1, 'one'],
[2, 'two'],
[3, 'three'],
]);
let arr = [...map.keys()]; // [1, 2, 3]
Generator 函数运行后，返回一个遍历器对象，因此也可以使用扩展运算符。
var go = function*(){
yield 1;
yield 2;
yield 3;
};
[...go()] // [1, 2, 3]
上面代码中，变量 go  是一个 Generator 函数，执行后返回的是一个遍历器对象，对这个遍历器对象执行扩展
运算符，就会将内部遍历得到的值，转为一个数组。
如果对没有 iterator  接口的对象，使用扩展运算符，将会报错。
var obj = {a: 1, b: 2};
let arr = [...obj]; // TypeError: Cannot spread non-iterable object

name 属性
函数的 name  属性，返回该函数的函数名。
function foo() {}
foo.name // "foo"
这个属性早就被浏览器广泛支持，但是直到 ES6 ，才将其写入了标准。
需要注意的是， ES6 对这个属性的行为做出了一些修改。如果将一个匿名函数赋值给一个变量， ES5
的 name  属性，会返回空字符串，而 ES6 的 name  属性会返回实际的函数名。
var func1 = function () {};
// ES5
func1.name // ""
// ES6
func1.name // "func1"
上面代码中，变量 func1  等于一个匿名函数， ES5 和 ES6 的 name  属性返回的值不一样。
如果将一个具名函数赋值给一个变量，则 ES5 和 ES6 的 name  属性都返回这个具名函数原本的名字。
const bar = function baz() {};
// ES5
bar.name // "baz"
// ES6
bar.name // "baz"
Function  构造函数返回的函数实例， name  属性的值为 “anonymous” 。
(new Function).name // "anonymous"
bind  返回的函数， name  属性值会加上 “bound ” 前缀。
function foo() {};
foo.bind({}).name // "bound foo"
(function(){}).bind({}).name // "bound "

箭头函数
基本用法
ES6 允许使用 “ 箭头 ” （ =>  ）定义函数。
var f = v => v;
上面的箭头函数等同于：
var f = function(v) {
return v;
};
如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。
var f = () => 5;
//  等同于
var f = function () { return 5 };
var sum = (num1, num2) => num1 + num2;
//  等同于
var sum = function(num1, num2) {
return num1 + num2;
};
如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用 return  语句返回。
var sum = (num1, num2) => { return num1 + num2; }
由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号。
var getTempItem = id => ({ id: id, name: "Temp" });
箭头函数可以与变量解构结合使用。
const full = ({ first, last }) => first + ' ' + last;
//  等同于
function full(person) {
return person.first + ' ' + person.last;
}
箭头函数使得表达更加简洁。
const isEven = n => n % 2 == 0;
const square = n => n * n;
上面代码只用了两行，就定义了两个简单的工具函数。如果不用箭头函数，可能就要占用多行，而且还不如
现在这样写醒目。
箭头函数的一个用处是简化回调函数。
//  正常函数写法
[1,2,3].map(function (x) {
return x * x;
});
//  箭头函数写法
[1,2,3].map(x => x * x);
另一个例子是
//  正常函数写法
var result = values.sort(function (a, b) {
return a - b;
});
//  箭头函数写法
var result = values.sort((a, b) => a - b);
下面是 rest 参数与箭头函数结合的例子。
const numbers = (...nums) => nums;
numbers(1, 2, 3, 4, 5)
// [1,2,3,4,5]
const headAndTail = (head, ...tail) => [head, tail];
headAndTail(1, 2, 3, 4, 5)
// [1,[2,3,4,5]]
使用注意点
箭头函数有几个使用注意点。
（ 1 ）函数体内的 this  对象，就是定义时所在的对象，而不是使用时所在的对象。
（ 2 ）不可以当作构造函数，也就是说，不可以使用 new  命令，否则会抛出一个错误。
（ 3 ）不可以使用 arguments  对象，该对象在函数体内不存在。如果要用，可以用 Rest 参数代替。
（ 4 ）不可以使用 yield  命令，因此箭头函数不能用作 Generator 函数。
上面四点中，第一点尤其值得注意。 this  对象的指向是可变的，但是在箭头函数中，它是固定的。
function foo() {
setTimeout(() => {
console.log('id:', this.id);
}, 100);
}
var id = 21;
foo.call({ id: 42 });
// id: 42
上面代码中， setTimeout  的参数是一个箭头函数，这个箭头函数的定义生效是在 foo  函数生成时，而它
的真正执行要等到 100 毫秒后。如果是普通函数，执行时 this  应该指向全局对象 window  ，这时应该输
出 21  。但是，箭头函数导致 this  总是指向函数定义生效时所在的对象（本例是 {id: 42}  ），所以输
出的是 42  。
箭头函数可以让 setTimeout  里面的 this  ，绑定定义时所在的作用域，而不是指向运行时所在的作用
域。下面是另一个例子。
function Timer() {
this.s1 = 0;
this.s2 = 0;
//  箭头函数
setInterval(() => this.s1++, 1000);
//  普通函数
setInterval(function () {
this.s2++;
}, 1000);
}
var timer = new Timer();
setTimeout(() => console.log('s1: ', timer.s1), 3100);
setTimeout(() => console.log('s2: ', timer.s2), 3100);
// s1: 3
// s2: 0
上面代码中， Timer  函数内部设置了两个定时器，分别使用了箭头函数和普通函数。前者的 this  绑定定
义时所在的作用域（即 Timer  函数），后者的 this  指向运行时所在的作用域（即全局对象）。所
以， 3100 毫秒之后， timer.s1  被更新了 3 次，而 timer.s2  一次都没更新。
箭头函数可以让 this  指向固定化，这种特性很有利于封装回调函数。下面是一个例子， DOM 事件的回调
函数封装在一个对象里面
function foo() {
return () => {
return () => {
return () => {
console.log('id:', this.id);
};
};
};
}
var f = foo.call({id: 1});
var t1 = f.call({id: 2})()(); // id: 1
var t2 = f().call({id: 3})(); // id: 1
var t3 = f()().call({id: 4}); // id: 1
上面代码之中，只有一个 this  ，就是函数 foo  的 this  ，所以 t1  、 t2  、 t3  都输出同样的结
果。因为所有的内层函数都是箭头函数，都没有自己的 this  ，它们的 this  其实都是最外层 foo  函数
的 this  。
除了 this  ，以下三个变量在箭头函数之中也是不存在的，指向外层函数的对应变
量： arguments  、 super  、 new.target  。
function foo() {
setTimeout(() => {
console.log('args:', arguments);
}, 100);
}
foo(2, 4, 6, 8)
// args: [2, 4, 6, 8]
上面代码中，箭头函数内部的变量 arguments  ，其实是函数 foo  的 arguments  变量。
另外，由于箭头函数没有自己的 this  ，所以当然也就不能用 call()  、 apply()  、 bind()  这些方法
去改变 this  的指向。
(function() {
return [
(() => this.x).bind({ x: 'inner' })()
];
}).call({ x: 'outer' });
// ['outer']
上面代码中，箭头函数没有自己的 this  ，所以 bind  方法无效，内部的 this  指向外部的 this  。
长期以来， JavaScript 语言的 this  对象一直是一个令人头痛的问题，在对象方法中使用 this  ，必须非常
小心。箭头函数 ” 绑定 ” this  ，很大程度上解决了这个困扰

函数绑定
箭头函数可以绑定 this  对象，大大减少了显式绑定 this  对象的写法（ call  、 apply  、 bind  ）。
但是，箭头函数并不适用于所有场合，所以 ES7 提出了 “ 函数绑定 ” （ function bind ）运算符，用来取
代 call  、 apply  、 bind  调用。虽然该语法还是 ES7 的一个提案，但是 Babel 转码器已经支持。
函数绑定运算符是并排的两个双冒号（ :: ），双冒号左边是一个对象，右边是一个函数。该运算符会自动将
左边的对象，作为上下文环境（即 this 对象），绑定到右边的函数上面。
foo::bar;
//  等同于
bar.bind(foo);
foo::bar(...arguments);
//  等同于
bar.apply(foo, arguments);
const hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn(obj, key) {
return obj::hasOwnProperty(key);
}
如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面。
var method = obj::obj.foo;
//  等同于
var method = ::obj.foo;
let log = ::console.log;
//  等同于
var log = console.log.bind(console);
由于双冒号运算符返回的还是原对象，因此可以采用链式写法。
//  例一
import { map, takeWhile, forEach } from "iterlib";
getPlayers()
::map(x => x.character())
::takeWhile(x => x.strength > 100)
::forEach(x => console.log(x));
//  例二
let { find, html } = jake;
document.querySelectorAll("div.myClass")
::find("p")
::html("hahaha");

尾调用优化
什么是尾调用？
尾调用（ Tail Call ）是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚，就是指某个函数的最
后一步是调用另一个函数。
function f(x){
return g(x);
}
上面代码中，函数 f 的最后一步是调用函数 g ，这就叫尾调用
以下三种情况，都不属于尾调用。
//  情况一
function f(x){
let y = g(x);
return y;
}
//  情况二
function f(x){
return g(x) + 1;
}
//  情况三
function f(x){
g(x);
}
上面代码中，情况一是调用函数 g 之后，还有赋值操作，所以不属于尾调用，即使语义完全一样。情况二也
属于调用后还有操作，即使写在一行内。情况三等同于下面的代码。
function f(x){
g(x);
return undefined;
}
尾调用不一定出现在函数尾部，只要是最后一步操作即可。
function f(x) {
if (x > 0) {
return m(x)
}
return n(x);
}
上面代码中，函数 m 和 n 都属于尾调用，因为它们都是函数 f 的最后一步操作。
尾调用优化
尾调用之所以与其他调用不同，就在于它的特殊的调用位置。
我们知道，函数调用会在内存形成一个 “ 调用记录 ” ，又称 “ 调用帧 ” （ call frame ），保存调用位置和内部变量
等信息。如果在函数 A 的内部调用函数 B ，那么在 A 的调用帧上方，还会形成一个 B 的调用帧。等到 B 运行结
束，将结果返回到 A ， B 的调用帧才会消失。如果函数 B 内部还调用函数 C ，那就还有一个 C 的调用帧，以此类
推。所有的调用帧，就形成一个 “ 调用栈 ” （ call stack ）。
尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都
不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。
function f() {
let m = 1;
let n = 2;
return g(m + n);
}
f();
//  等同于
function f() {
return g(3);
}
f();
//  等同于
g(3);
上面代码中，如果函数 g 不是尾调用，函数 f 就需要保存内部变量 m 和 n 的值、 g 的调用位置等信息。但由于调
用 g 之后，函数 f 就结束了，所以执行到最后一步，完全可以删除 f(x)  的调用帧，只保留 g(3)  的调用帧。
这就叫做 “ 尾调用优化 ” （ Tail call optimization ），即只保留内层函数的调用帧。如果所有函数都是尾调用，那
么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是 “ 尾调用优化 ” 的意义。
注意，只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进
行 “ 尾调用优化 ” 。
function addOne(a){
var one = 1;
function inner(b){
return b + one;
}
return inner(a);
}
上面的函数不会进行尾调用优化，因为内层函数 inner  用到了外层函数 addOne  的内部变量 one 

尾递归
函数调用自身，称为递归。如果尾调用自身，就称为尾递归。
递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生 “ 栈溢出 ” 错误（ stack overflow ）。但
对于尾递归来说，由于只存在一个调用帧，所以永远不会发生 “ 栈溢出 ” 错误。
function factorial(n) {
if (n === 1) return 1;
return n * factorial(n - 1);
}
factorial(5) // 120
上面代码是一个阶乘函数，计算 n 的阶乘，最多需要保存 n 个调用记录，复杂度 O(n)  。
如果改写成尾递归，只保留一个调用记录，复杂度 O(1)  。
function factorial(n, total) {
if (n === 1) return total;
return factorial(n - 1, n * total);
}
factorial(5, 1) // 120
由此可见， “ 尾调用优化 ” 对递归操作意义重大，所以一些函数式编程语言将其写入了语言规格。 ES6 也是如
此，第一次明确规定，所有 ECMAScript 的实现，都必须部署 “ 尾调用优化 ” 。这就是说，在 ES6 中，只要使用
尾递归，就不会发生栈溢出，相对节省内存。

 尾递归
函数调用自身，称为递归。如果尾调用自身，就称为尾递归。
递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生 “ 栈溢出 ” 错误（ stack overflow ）。但
对于尾递归来说，由于只存在一个调用帧，所以永远不会发生 “ 栈溢出 ” 错误。
function factorial(n) {
if (n === 1) return 1;
return n * factorial(n - 1);
}
factorial(5) // 120
上面代码是一个阶乘函数，计算 n 的阶乘，最多需要保存 n 个调用记录，复杂度 O(n)  。
如果改写成尾递归，只保留一个调用记录，复杂度 O(1)  。
function factorial(n, total) {
if (n === 1) return total;
return factorial(n - 1, n * total);
}
factorial(5, 1) // 120
由此可见， “ 尾调用优化 ” 对递归操作意义重大，所以一些函数式编程语言将其写入了语言规格。 ES6 也是如
此，第一次明确规定，所有 ECMAScript 的实现，都必须部署 “ 尾调用优化 ” 。这就是说，在 ES6 中，只要使用
尾递归，就不会发生栈溢出，相对节省内存。
递归函数的改写
尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。做到这一点的方法，就是把所有用到的
内部变量改写成函数的参数。比如上面的例子，阶乘函数 factorial  需要用到一个中间变量 total  ，那就把这个
中间变量改写成函数的参数。这样做的缺点就是不太直观，第一眼很难看出来，为什么计算 5 的阶乘，需要
传入两个参数 5 和 1 ？
两个方法可以解决这个问题。方法一是在尾递归函数之外，再提供一个正常形式的函数。
function tailFactorial(n, total) {
if (n === 1) return total;
return tailFactorial(n - 1, n * total);
}
function factorial(n) {
return tailFactorial(n, 1);
}
factorial(5) // 120
上面代码通过一个正常形式的阶乘函数 factorial  ，调用尾递归函数 tailFactorial  ，看起来就正常多了。
函数式编程有一个概念，叫做柯里化（ currying ），意思是将多参数的函数转换成单参数的形式。这里也可以
使用柯里化。
function currying(fn, n) {
return function (m) {
return fn.call(this, m, n);
};
}
function tailFactorial(n, total) {
if (n === 1) return total;
return tailFactorial(n - 1, n * total);
}
const factorial = currying(tailFactorial, 1);
factorial(5) // 120
上面代码通过柯里化，将尾递归函数 tailFactorial  变为只接受 1 个参数的 factorial  。
第二种方法就简单多了，就是采用 ES6 的函数默认值。
function factorial(n, total = 1) {
if (n === 1) return total;
return factorial(n - 1, n * total);
}
factorial(5) // 120
上面代码中，参数 total  有默认值 1 ，所以调用时不用提供这个值。
总结一下，递归本质上是一种循环操作。纯粹的函数式编程语言没有循环操作命令，所有的循环都用递归实
现，这就是为什么尾递归对这些语言极其重要。对于其他支持 “ 尾调用优化 ” 的语言（比如 Lua ， ES6 ），只需
要知道循环可以用递归代替，而一旦使用递归，就最好使用尾递归。
严格模式
ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。
这是因为在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。
func.arguments  ：返回调用时函数的参数。
func.caller  ：返回调用当前函数的那个函数。
尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾
调用模式仅在严格模式下生效。
function restricted() {
"use strict";
restricted.caller; //  报错
restricted.arguments; //  报错
}
restricted();
尾递归优化的实现
尾递归优化只在严格模式下生效，那么正常模式下，或者那些不支持该功能的环境中，有没有办法也使用尾
递归优化呢？回答是可以的，就是自己实现尾递归优化。
它的原理非常简单。尾递归之所以需要优化，原因是调用栈太多，造成溢出，那么只要减少调用栈，就不会
溢出。怎么做可以减少调用栈呢？就是采用 “ 循环 ” 换掉 “ 递归 ” 。
下面是一个正常的递归函数。
function sum(x, y) {
if (y > 0) {
return sum(x + 1, y - 1);
} else {
return x;
}
}
sum(1, 100000)
// Uncaught RangeError: Maximum call stack size exceeded(…)
上面代码中， sum  是一个递归函数，参数 x  是需要累加的值，参数 y  控制递归次数。一旦指定 sum  递
归 100000 次，就会报错，提示超出调用栈的最大次数。
蹦床函数（ trampoline ）可以将递归执行转为循环执行。
function trampoline(f) {
while (f && f instanceof Function) {
f = f();
}
return f;
}
上面就是蹦床函数的一个实现，它接受一个函数 f  作为参数。只要 f  执行后返回一个函数，就继续执
行。注意，这里是返回一个函数，然后执行该函数，而不是函数里面调用函数，这样就避免了递归执行，从
而就消除了调用栈过大的问题。
然后，要做的就是将原来的递归函数，改写为每一步返回另一个函数。
function sum(x, y) {
if (y > 0) {
return sum.bind(null, x + 1, y - 1);
} else {
return x;
}
}
上面代码中， sum  函数的每次执行，都会返回自身的另一个版本。
现在，使用蹦床函数执行 sum  ，就不会发生调用栈溢出。
trampoline(sum(1, 100000))
// 100001
蹦床函数并不是真正的尾递归优化，下面的实现才是。
function tco(f) {
var value;
var active = false;
var accumulated = [];
return function accumulator() {
accumulated.push(arguments);
if (!active) {
active = true;
while (accumulated.length) {
value = f.apply(this, accumulated.shift());
}
active = false;
return value;
}
};
}
var sum = tco(function(x, y) {
if (y > 0) {
return sum(x + 1, y - 1)
}
else {
return x
}
});
sum(1, 100000)
// 100001
上面代码中， tco  函数是尾递归优化的实现，它的奥妙就在于状态变量 active  。默认情况下，这个变量
是不激活的。一旦进入尾递归优化的过程，这个变量就激活了。然后，每一轮递归 sum  返回的都
是 undefined  ，所以就避免了递归执行；而 accumulated  数组存放每一轮 sum  执行的参数，总是有值
的，这就保证了 accumulator  函数内部的 while  循环总是会执行。这样就很巧妙地将 “ 递归 ” 改成了 “ 循
环 ” ，而后一轮的参数会取代前一轮的参数，保证了调用栈只有一层



对象的扩展
属性的简洁表示法
ES6 允许直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。
var foo = 'bar';
var baz = {foo};
baz // {foo: "bar"}
//  等同于
var baz = {foo: foo};
上面代码表明， ES6 允许在对象之中，只写属性名，不写属性值。这时，属性值等于属性名所代表的变量。
下面是另一个例子。
function f(x, y) {
return {x, y};
}
//  等同于
function f(x, y) {
return {x: x, y: y};
}
f(1, 2) // Object {x: 1, y: 2}
除了属性简写，方法也可以简写。
var o = {
method() {
return "Hello!";
}
};
//  等同于
var o = {
method: function() {
return "Hello!";
}
};


下面是一个实际的例子。
var birth = '2000/01/01';
var Person = {
name: ' 张三 ',
// 等同于 birth: birth
birth,
//  等同于 hello: function ()...
hello() { console.log(' 我的名字是 ', this.name); }
};
这种写法用于函数的返回值，将会非常方便。
function getPoint() {
var x = 1;
var y = 10;
return {x, y};
}
getPoint()
// {x:1, y:10}

CommonJS 模块输出变量，就非常合适使用简洁写法。
var ms = {};
function getItem (key) {
return key in ms ? ms[key] : null;
}
function setItem (key, value) {
ms[key] = value;
}
function clear () {
ms = {};
}
module.exports = { getItem, setItem, clear };
//  等同于
module.exports = {
getItem: getItem,
setItem: setItem,
clear: clear
};

注意，简洁写法的属性名总是字符串，这会导致一些看上去比较奇怪的结果。
var obj = {
class () {}
};
//  等同于
var obj = {
'class': function() {}
};
上面代码中， class  是字符串，所以不会因为它属于关键字，而导致语法解析报错。
如果某个方法的值是一个 Generator 函数，前面需要加上星号。
var obj = {
* m(){
yield 'hello world';
}
};

属性名表达式
JavaScript 语言定义对象的属性，有两种方法。
//  方法一
obj.foo = true;
//  方法二
obj['a' + 'bc'] = 123;
上面代码的方法一是直接用标识符作为属性名，方法二是用表达式作为属性名，这时要将表达式放在方括号
之内。
但是，如果使用字面量方式定义对象（使用大括号），在 ES5 中只能使用方法一（标识符）定义属性。
var obj = {
foo: true,
abc: 123
};
ES6 允许字面量定义对象时，用方法二（表达式）作为对象的属性名，即把表达式放在方括号内。
let propKey = 'foo';
let obj = {
[propKey]: true,
['a' + 'bc']: 123
};
下面是另一个例子。
var lastWord = 'last word';
var a = {
'first word': 'hello',
[lastWord]: 'world'
};
a['first word'] // "hello"
a[lastWord] // "world"
a['last word'] // "world"
表达式还可以用于定义方法名。
let obj = {
['h'+'ello']() {
return 'hi';
}
};
obj.hello() // hi
注意，属性名表达式与简洁表示法，不能同时使用，会报错。
//  报错
var foo = 'bar';
var bar = 'abc';
var baz = { [foo] };
//  正确
var foo = 'bar';
var baz = { [foo]: 'abc'};

方法的 name 属性
函数的 name  属性，返回函数名。对象方法也是函数，因此也有 name  属性。
var person = {
sayName() {
console.log(this.name);
},
get firstName() {
return "Nicholas";
}
};
person.sayName.name // "sayName"
person.firstName.name // "get firstName"
上面代码中，方法的 name  属性返回函数名（即方法名）。如果使用了取值函数，则会在方法名前加
上 get  。如果是存值函数，方法名的前面会加上 set  。
有两种特殊情况： bind  方法创造的函数， name  属性返回 “bound” 加上原函数的名字； Function  构造函
数创造的函数， name  属性返回 “anonymous” 。
(new Function()).name // "anonymous"
var doSomething = function() {
// ...
};
doSomething.bind().name // "bound doSomething"
如果对象的方法是一个 Symbol 值，那么 name  属性返回的是这个 Symbol 值的描述。
const key1 = Symbol('description');
const key2 = Symbol();
let obj = {
[key1]() {},
[key2]() {},
};
obj[key1].name // "[description]"
obj[key2].name // ""
上面代码中， key1  对应的 Symbol 值有描述， key2  没有。

Object.is()
ES5 比较两个值是否相等，只有两个运算符：相等运算符（ ==  ）和严格相等运算符（ ===  ）。它们都有
缺点，前者会自动转换数据类型，后者的 NaN  不等于自身，以及 +0  等于 -0  。 JavaScript 缺乏一种运
算，在所有环境中，只要两个值是一样的，它们就应该相等。
ES6 提出 “Same-value equality” （同值相等）算法，用来解决这个问题。 Object.is  就是部署这个算法的新
方法。它用来比较两个值是否严格相等，与严格比较运算符（ === ）的行为基本一致。
Object.is('foo', 'foo')
// true
Object.is({}, {})
// false
不同之处只有两个：一是 +0  不等于 -0  ，二是 NaN  等于自身。
+0 === -0 //true
NaN === NaN // false
Object.is(+0, -0) // false
Object.is(NaN, NaN) // true
ES5 可以通过下面的代码，部署 Object.is  。
Object.defineProperty(Object, 'is', {
value: function(x, y) {
if (x === y) {
//  针对 +0  不等于 -0 的情况
return x !== 0 || 1 / x === 1 / y;
}
//  针对 NaN 的情况
return x !== x && y !== y;
},
configurable: true,
enumerable: false,
writable: true
});


Object.assign()
基本用法
Object.assign  方法用于对象的合并，将源对象（ source ）的所有可枚举属性，复制到目标对象
（ target ）。
var target = { a: 1 };
var source1 = { b: 2 };
var source2 = { c: 3 };
Object.assign(target, source1, source2);
target // {a:1, b:2, c:3}
Object.assign  方法的第一个参数是目标对象，后面的参数都是源对象。
注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。
var target = { a: 1, b: 1 };
var source1 = { b: 2, c: 2 };
var source2 = { c: 3 };
Object.assign(target, source1, source2);
target // {a:1, b:2, c:3}
如果只有一个参数， Object.assign  会直接返回该参数。
var obj = {a: 1};
Object.assign(obj) === obj // true
如果该参数不是对象，则会先转成对象，然后返回。
typeof Object.assign(2) // "object"
由于 undefined  和 null  无法转成对象，所以如果它们作为参数，就会报错。
Object.assign(undefined) //  报错
Object.assign(null) //  报错
如果非对象参数出现在源对象的位置（即非首参数），那么处理规则有所不同。首先，这些参数都会转成对
象，如果无法转成对象，就会跳过。这意味着，如果 undefined  和 null  不在首参数，就不会报错。
let obj = {a: 1};
Object.assign(obj, undefined) === obj // true
Object.assign(obj, null) === obj // true
其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式，拷
贝入目标对象，其他值都不会产生效果。
var v1 = 'abc';
var v2 = true;
var v3 = 10;
var obj = Object.assign({}, v1, v2, v3);
console.log(obj); // { "0": "a", "1": "b", "2": "c" }
上面代码中， v1  、 v2  、 v3  分别是字符串、布尔值和数值，结果只有字符串合入目标对象（以字符数
组的形式），数值和布尔值都会被忽略。这是因为只有字符串的包装对象，会产生可枚举属性。
Object(true) // {[[PrimitiveValue]]: true}
Object(10) // {[[PrimitiveValue]]: 10}
Object('abc') // {0: "a", 1: "b", 2: "c", length: 3, [[PrimitiveValue]]: "abc"}
上面代码中，布尔值、数值、字符串分别转成对应的包装对象，可以看到它们的原始值都在包装对象的内部
属性 [[PrimitiveValue]]  上面，这个属性是不会被 Object.assign  拷贝的。只有字符串的包装对象，会
产生可枚举的实义属性，那些属性则会被拷贝。
Object.assign  拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚
举的属性（ enumerable: false  ）。
Object.assign({b: 'c'},
Object.defineProperty({}, 'invisible', {
enumerable: false,
value: 'hello'
})
)
// { b: 'c' }
上面代码中， Object.assign  要拷贝的对象只有一个不可枚举属性 invisible  ，这个属性并没有被拷贝
进去。
属性名为 Symbol 值的属性，也会被 Object.assign  拷贝。
Object.assign({ a: 'b' }, { [Symbol('c')]: 'd' })
// { a: 'b', Symbol(c): 'd' }
注意点
Object.assign  方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么
目标对象拷贝得到的是这个对象的引用。
var obj1 = {a: {b: 1}};
var obj2 = Object.assign({}, obj1);
obj1.a.b = 2;
obj2.a.b // 2
上面代码中，源对象 obj1  的 a  属性的值是一个对象， Object.assign  拷贝得到的是这个对象的引用。
这个对象的任何变化，都会反映到目标对象上面。
对于这种嵌套的对象，一旦遇到同名属性， Object.assign  的处理方法是替换，而不是添加。
var target = { a: { b: 'c', d: 'e' } }
var source = { a: { b: 'hello' } }
Object.assign(target, source)
// { a: { b: 'hello' } }
上面代码中， target  对象的 a  属性被 source  对象的 a  属性整个替换掉了，而不会得到 { a: { b:
'hello', d: 'e' } }  的结果。这通常不是开发者想要的，需要特别小心。
有一些函数库提供 Object.assign  的定制版本（比如 Lodash 的 _.defaultsDeep  方法），可以解决浅拷贝
的问题，得到深拷贝的合并。
注意， Object.assign  可以用来处理数组，但是会把数组视为对象。
Object.assign([1, 2, 3], [4, 5])
// [4, 5, 3]
上面代码中， Object.assign  把数组视为属性名为 0 、 1 、 2 的对象，因此目标数组的 0 号属性 4  覆盖了原
数组的 0 号属性 1  。
常见用途
Object.assign  方法有很多用处。
（ 1 ）为对象添加属性
class Point {
constructor(x, y) {
Object.assign(this, {x, y});
}
}
上面方法通过 Object.assign  方法，将 x  属性和 y  属性添加到 Point  类的对象实例。
（ 2 ）为对象添加方法
Object.assign(SomeClass.prototype, {
someMethod(arg1, arg2) {
···
},
anotherMethod() {
···
}
});
//  等同于下面的写法
SomeClass.prototype.someMethod = function (arg1, arg2) {
···
};
SomeClass.prototype.anotherMethod = function () {
···
};
上面代码使用了对象属性的简洁表示法，直接将两个函数放在大括号中，再使用 assign 方法添加到
SomeClass.prototype 之中。
（ 3 ）克隆对象
function clone(origin) {
return Object.assign({}, origin);
}
上面代码将原始对象拷贝到一个空对象，就得到了原始对象的克隆。
不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以
采用下面的代码。
function clone(origin) {
let originProto = Object.getPrototypeOf(origin);
return Object.assign(Object.create(originProto), origin);
}
（ 4 ）合并多个对象
将多个对象合并到某个对象。
const merge =
(target, ...sources) => Object.assign(target, ...sources);
如果希望合并后返回一个新对象，可以改写上面函数，对一个空对象合并。
const merge =
(...sources) => Object.assign({}, ...sources);
（ 5 ）为属性指定默认值
const DEFAULTS = {
logLevel: 0,
outputFormat: 'html'
};
function processContent(options) {
let options = Object.assign({}, DEFAULTS, options);
}
上面代码中， DEFAULTS  对象是默认值， options  对象是用户提供的参数。 Object.assign  方法
将 DEFAULTS  和 options  合并成一个新对象，如果两者有同名属性，则 option  的属性值会覆
盖 DEFAULTS  的属性值。
注意，由于存在深拷贝的问题， DEFAULTS  对象和 options  对象的所有属性的值，都只能是简单类型，而
不能指向另一个对象。否则，将导致 DEFAULTS  对象的该属性不起作用。

属性的可枚举性
对象的每个属性都有一个描述对象（ Descriptor ），用来控制该属性的行
为。 Object.getOwnPropertyDescriptor  方法可以获取该属性的描述对象。
let obj = { foo: 123 };
Object.getOwnPropertyDescriptor(obj, 'foo')
// { value: 123,
// writable: true,
// enumerable: true,
// configurable: true }
描述对象的 enumerable  属性，称为 ” 可枚举性 “ ，如果该属性为 false  ，就表示某些操作会忽略当前属
性。
ES5 有三个操作会忽略 enumerable  为 false  的属性。
for...in  循环：只遍历对象自身的和继承的可枚举的属性
Object.keys() ：返回对象自身的所有可枚举的属性的键名
JSON.stringify() ：只串行化对象自身的可枚举的属性
ES6 新增了两个操作，会忽略 enumerable  为 false  的属性。
Object.assign() ：只拷贝对象自身的可枚举的属性
Reflect.enumerate() ：返回所有 for...in  循环会遍历的属性
这五个操作之中，只有 for...in  和 Reflect.enumerate()  会返回继承的属性。实际上，引
入 enumerable  的最初目的，就是让某些属性可以规避掉 for...in  操作。比如，对象原型
的 toString  方法，以及数组的 length  属性，就通过这种手段，不会被 for...in  遍历到。
Object.getOwnPropertyDescriptor(Object.prototype, 'toString').enumerable
// false
Object.getOwnPropertyDescriptor([], 'length').enumerable
// false
另外， ES6 规定，所有 Class 的原型的方法都是不可枚举的。
Object.getOwnPropertyDescriptor(class {foo() {}}.prototype, 'foo').enumerable
// false
总的来说，操作中引入继承的属性会让问题复杂化，大多数时候，我们只关心对象自身的属性。所以，尽量
不要用 for...in  循环，而用 Object.keys()  代替。

属性的遍历
ES6 一共有 6 种方法可以遍历对象的属性。
（ 1 ） for...in
for...in  循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。
（ 2 ） Object.keys(obj)
Object.keys  返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）。
（ 3 ） Object.getOwnPropertyNames(obj)
Object.getOwnPropertyNames  返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可
枚举属性）。
（ 4 ） Object.getOwnPropertySymbols(obj)
Object.getOwnPropertySymbols  返回一个数组，包含对象自身的所有 Symbol 属性。
（ 5 ） Reflect.ownKeys(obj)
Reflect.ownKeys  返回一个数组，包含对象自身的所有属性，不管是属性名是 Symbol 或字符串，也不管是
否可枚举。
（ 6 ） Reflect.enumerate(obj)
Reflect.enumerate  返回一个 Iterator 对象，遍历对象自身的和继承的所有可枚举属性（不含 Symbol 属
性），与 for...in  循环相同。
以上的 6 种方法遍历对象的属性，都遵守同样的属性遍历的次序规则。
首先遍历所有属性名为数值的属性，按照数字排序。
其次遍历所有属性名为字符串的属性，按照生成时间排序。
最后遍历所有属性名为 Symbol 值的属性，按照生成时间排序。
Reflect.ownKeys({ [Symbol()]:0, b:0, 10:0, 2:0, a:0 })
// ['2', '10', 'b', 'a', Symbol()]
上面代码中， Reflect.ownKeys  方法返回一个数组，包含了参数对象的所有属性。这个数组的属性次序是
这样的，首先是数值属性 2  和 10  ，其次是字符串属性 b  和 a  ，最后是 Symbol 属性。

__proto__  属
性， Object.setPrototypeOf() ， Object.getPrototypeOf()
（ 1 ） __proto__  属性
__proto__  属性（前后各两个下划线），用来读取或设置当前对象的 prototype  对象。目前，所有浏览
器（包括 IE11 ）都部署了这个属性。
// es6 的写法
var obj = {
method: function() { ... }
};
obj.__proto__ = someOtherObj;
// es5 的写法
var obj = Object.create(someOtherObj);
obj.method = function() { ... };
该属性没有写入 ES6 的正文，而是写入了附录，原因是 __proto__  前后的双下划线，说明它本质上是一个
内部属性，而不是一个正式的对外的 API ，只是由于浏览器广泛支持，才被加入了 ES6 。标准明确规定，只有
浏览器必须部署这个属性，其他运行环境不一定需要部署，而且新的代码最好认为这个属性是不存在的。因
此，无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面
的 Object.setPrototypeOf()  （写操作）、 Object.getPrototypeOf()  （读操
作）、 Object.create()  （生成操作）代替。
在实现上， __proto__  调用的是 Object.prototype.__proto__  ，具体实现如下。
Object.defineProperty(Object.prototype, '__proto__', {
get() {
let _thisObj = Object(this);
return Object.getPrototypeOf(_thisObj);
},
set(proto) {
if (this === undefined || this === null) {
throw new TypeError();
}
if (!isObject(this)) {
return undefined;
}
if (!isObject(proto)) {
return undefined;
}
let status = Reflect.setPrototypeOf(this, proto);
if (!status) {
throw new TypeError();
}
},
});
function isObject(value) {
return Object(value) === value;
}
如果一个对象本身部署了 __proto__  属性，则该属性的值就是对象的原型。
Object.getPrototypeOf({ __proto__: null })
// null

（ 2 ） Object.setPrototypeOf()
Object.setPrototypeOf  方法的作用与 __proto__  相同，用来设置一个对象的 prototype  对象。它是
ES6 正式推荐的设置原型对象的方法。
//  格式
Object.setPrototypeOf(object, prototype)
//  用法
var o = Object.setPrototypeOf({}, null);
该方法等同于下面的函数。
function (obj, proto) {
obj.__proto__ = proto;
return obj;
}
下面是一个例子。
let proto = {};
let obj = { x: 10 };
Object.setPrototypeOf(obj, proto);
proto.y = 20;
proto.z = 40;
obj.x // 10
obj.y // 20
obj.z // 40
上面代码将 proto 对象设为 obj 对象的原型，所以从 obj 对象可以读取 proto 对象的属性。
（ 3 ） Object.getPrototypeOf()
该方法与 setPrototypeOf 方法配套，用于读取一个对象的 prototype 对象。
Object.getPrototypeOf(obj);
下面是一个例子。
function Rectangle() {
}
var rec = new Rectangle();
Object.getPrototypeOf(rec) === Rectangle.prototype
// true
Object.setPrototypeOf(rec, Object.prototype);
Object.getPrototypeOf(rec) === Rectangle.prototype
// false

Object.values() ， Object.entries()
Object.keys()
ES5 引入了 Object.keys  方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历
（ enumerable ）属性的键名。
var obj = { foo: "bar", baz: 42 };
Object.keys(obj)
// ["foo", "baz"]
目前， ES7 有一个提案，引入了跟 Object.keys  配套的 Object.values  和 Object.entries  。
let {keys, values, entries} = Object;
let obj = { a: 1, b: 2, c: 3 };
for (let key of keys(obj)) {
console.log(key); // 'a', 'b', 'c'
}
for (let value of values(obj)) {
console.log(value); // 1, 2, 3
}
for (let [key, value] of entries(obj)) {
console.log([key, value]); // ['a', 1], ['b', 2], ['c', 3]
}
Object.values()
Object.values  方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（ enumerable ）属
性的键值。
var obj = { foo: "bar", baz: 42 };
Object.values(obj)
// ["bar", 42]
返回数组的成员顺序，与本章的《属性的遍历》部分介绍的排列规则一致。
var obj = { 100: 'a', 2: 'b', 7: 'c' };
Object.values(obj)
// ["b", "c", "a"]
上面代码中，属性名为数值的属性，是按照数值大小，从小到大遍历的，因此返回的顺序
是 b  、 c  、 a  。
Object.values  只返回对象自身的可遍历属性。
var obj = Object.create({}, {p: {value: 42}});
Object.values(obj) // []
上面代码中， Object.create  方法的第二个参数添加的对象属性（属性 p  ），如果不显式声明，默认是
不可遍历的。 Object.values  不会返回这个属性。
Object.values  会过滤属性名为 Symbol 值的属性。
Object.values({ [Symbol()]: 123, foo: 'abc' });
// ['abc']
如果 Object.values  方法的参数是一个字符串，会返回各个字符组成的一个数组。
Object.values('foo')
// ['f', 'o', 'o']
上面代码中，字符串会先转成一个类似数组的对象。字符串的每个字符，就是该对象的一个属性。因
此， Object.values  返回每个属性的键值，就是各个字符组成的一个数组。
如果参数不是对象， Object.values  会先将其转为对象。由于数值和布尔值的包装对象，都不会为实例添
加非继承的属性。所以， Object.values  会返回空数组。
Object.values(42) // []
Object.values(true) // []
Object.entries
Object.entries  方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（ enumerable ）属
性的键值对数组。
var obj = { foo: 'bar', baz: 42 };
Object.entries(obj)
// [ ["foo", "bar"], ["baz", 42] ]
除了返回值不一样，该方法的行为与 Object.values  基本一致。
如果原对象的属性名是一个 Symbol 值，该属性会被省略。
Object.entries({ [Symbol()]: 123, foo: 'abc' });
// [ [ 'foo', 'abc' ] ]
上面代码中，原对象有两个属性， Object.entries  只输出属性名非 Symbol 值的属性。将来可能会
有 Reflect.ownEntries()  方法，返回对象自身的所有属性。
Object.entries  的基本用途是遍历对象的属性。
let obj = { one: 1, two: 2 };
for (let [k, v] of Object.entries(obj)) {
console.log(`${JSON.stringify(k)}: ${JSON.stringify(v)}`);
}
// "one": 1
// "two": 2
Object.entries  方法的一个用处是，将对象转为真正的 Map  结构。
var obj = { foo: 'bar', baz: 42 };
var map = new Map(Object.entries(obj));
map // Map { foo: "bar", baz: 42 }
自己实现 Object.entries  方法，非常简单。
// Generator 函数的版本
function* entries(obj) {
for (let key of Object.keys(obj)) {
yield [key, obj[key]];
}
}
//  非 Generator 函数的版本
function entries(obj) {
return (for (key of Object.keys(obj)) [key, obj[key]]);
}

对象的扩展运算符
目前， ES7 有一个提案，将 Rest 解构赋值 / 扩展运算符（ ... ）引入对象。 Babel 转码器已经支持这项功能。
（ 1 ） Rest 解构赋值
对象的 Rest 解构赋值用于从一个对象取值，相当于将所有可遍历的、但尚未被读取的属性，分配到指定的对
象上面。所有的键和它们的值，都会拷贝到新对象上面。
let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };
x // 1
y // 2
z // { a: 3, b: 4 }
上面代码中，变量 z  是 Rest 解构赋值所在的对象。它获取等号右边的所有尚未读取的键（ a  和 b  ），将
它们和它们的值拷贝过来。
由于 Rest 解构赋值要求等号右边是一个对象，所以如果等号右边是 undefined  或 null  ，就会报错，因为
它们无法转为对象。
let { x, y, ...z } = null; //  运行时错误
let { x, y, ...z } = undefined; //  运行时错误
Rest 解构赋值必须是最后一个参数，否则会报错。
let { ...x, y, z } = obj; //  句法错误
let { x, ...y, ...z } = obj; //  句法错误
上面代码中， Rest 解构赋值不是最后一个参数，所以会报错。
注意， Rest 解构赋值的拷贝是浅拷贝，即如果一个键的值是复合类型的值（数组、对象、函数）、那么 Rest
解构赋值拷贝的是这个值的引用，而不是这个值的副本。
let obj = { a: { b: 1 } };
let { ...x } = obj;
obj.a.b = 2;
x.a.b // 2
上面代码中， x  是 Rest 解构赋值所在的对象，拷贝了对象 obj  的 a  属性。 a  属性引用了一个对象，修
改这个对象的值，会影响到 Rest 解构赋值对它的引用。
另外， Rest 解构赋不会拷贝继承自原型对象的属性。
let o1 = { a: 1 };
let o2 = { b: 2 };
o2.__proto__ = o1;
let o3 = { ...o2 };
o3 // { b: 2 }
上面代码中，对象 o3  是 o2  的拷贝，但是只复制了 o2  自身的属性，没有复制它的原型对象 o1  的属
性。
下面是另一个例子。
var o = Object.create({ x: 1, y: 2 });
o.z = 3;
let { x, ...{ y, z } } = o;
x // 1
y // undefined
z // 3
上面代码中，变量 x  是单纯的解构赋值，所以可以读取继承的属性； Rest 解构赋值产生的变量 y  和 z  ，
只能读取对象自身的属性，所以只有变量 z  可以赋值成功。
Rest 解构赋值的一个用处，是扩展某个函数的参数，引入其他操作。
function baseFunction({ a, b }) {
// ...
}
function wrapperFunction({ x, y, ...restConfig }) {
//  使用 x 和 y 参数进行操作
//  其余参数传给原始函数
return baseFunction(restConfig);
}
上面代码中，原始函数 baseFunction  接受 a  和 b  作为参数，函
数 wrapperFunction  在 baseFunction  的基础上进行了扩展，能够接受多余的参数，并且保留原始函数的
行为。
（ 2 ）扩展运算符
扩展运算符（ ...  ）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。
let z = { a: 3, b: 4 };
let n = { ...z };
n // { a: 3, b: 4 }
这等同于使用 Object.assign  方法。
let aClone = { ...a };
//  等同于
let aClone = Object.assign({}, a);
扩展运算符可以用于合并两个对象。
let ab = { ...a, ...b };
//  等同于
let ab = Object.assign({}, a, b);
如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。
let aWithOverrides = { ...a, x: 1, y: 2 };
//  等同于
let aWithOverrides = { ...a, ...{ x: 1, y: 2 } };
//  等同于
let x = 1, y = 2, aWithOverrides = { ...a, x, y };
//  等同于
let aWithOverrides = Object.assign({}, a, { x: 1, y: 2 });
上面代码中， a  对象的 x  属性和 y  属性，拷贝到新对象后会被覆盖掉。
这用来修改现有对象部分的部分属性就很方便了。
let newVersion = {
...previousVersion,
name: 'New Name' // Override the name property
};
上面代码中， newVersion  对象自定义了 name  属性，其他属性全部复制自 previousVersion  对象。
如果把自定义属性放在扩展运算符前面，就变成了设置新对象的默认属性值。
let aWithDefaults = { x: 1, y: 2, ...a };
//  等同于
let aWithDefaults = Object.assign({}, { x: 1, y: 2 }, a);
//  等同于
let aWithDefaults = Object.assign({ x: 1, y: 2 }, a);
扩展运算符的参数对象之中，如果有取值函数 get  ，这个函数是会执行的。
//  并不会抛出错误，因为 x 属性只是被定义，但没执行
let aWithXGetter = {
...a,
get x() {
throws new Error('not thrown yet');
}
};
//  会抛出错误，因为 x 属性被执行了
let runtimeError = {
...a,
...{
get x() {
throws new Error('thrown now');
}
}
};
如果扩展运算符的参数是 null  或 undefined  ，这个两个值会被忽略，不会报错。
let emptyObject = { ...null, ...undefined }; //  不报错

Object.getOwnPropertyDescriptors()
ES5 有一个 Object.getOwnPropertyDescriptor  方法，返回某个对象属性的描述对象（ descriptor ）。
var obj = { p: 'a' };
Object.getOwnPropertyDescriptor(obj, 'p')
// Object { value: "a",
// writable: true,
// enumerable: true,
// configurable: true
// }
ES7 有一个提案，提出了 Object.getOwnPropertyDescriptors  方法，返回指定对象所有自身属性（非继承
属性）的描述对象。
const obj = {
foo: 123,
get bar() { return 'abc' }
};
Object.getOwnPropertyDescriptors(obj)
// { foo:
// { value: 123,
// writable: true,
// enumerable: true,
// configurable: true },
// bar:
// { get: [Function: bar],
// set: undefined,
// enumerable: true,
// configurable: true } }
Object.getOwnPropertyDescriptors  方法返回一个对象，所有原对象的属性名都是该对象的属性名，对应
的属性值就是该属性的描述对象。
该方法的实现非常容易。
function getOwnPropertyDescriptors(obj) {
const result = {};
for (let key of Reflect.ownKeys(obj)) {
result[key] = Object.getOwnPropertyDescriptor(obj, key);
}
return result;
}
该方法的提出目的，主要是为了解决 Object.assign()  无法正确拷贝 get  属性和 set  属性的问题。
const source = {
set foo(value) {
console.log(value);
}
};
const target1 = {};
Object.assign(target1, source);
Object.getOwnPropertyDescriptor(target1, 'foo')
// { value: undefined,
// writable: true,
// enumerable: true,
// configurable: true }
上面代码中， source  对象的 foo  属性的值是一个赋值函数， Object.assign  方法将这个属性拷贝
给 target1  对象，结果该属性的值变成了 undefined  。这是因为 Object.assign  方法总是拷贝一个属
性的值，而不会拷贝它背后的赋值方法或取值方法。
这时， Object.getOwnPropertyDescriptors  方法配合 Object.defineProperties  方法，就可以实现正确
拷贝。
const source = {
set foo(value) {
console.log(value);
}
};
const target2 = {};
Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
Object.getOwnPropertyDescriptor(target2, 'foo')
// { get: undefined,
// set: [Function: foo],
// enumerable: true,
// configurable: true }
上面代码中，将两个对象合并的逻辑提炼出来，就是下面这样。
const shallowMerge = (target, source) => Object.defineProperties(
target,
Object.getOwnPropertyDescriptors(source)
);
Object.getOwnPropertyDescriptors  方法的另一个用处，是配合 Object.create  方法，将对象属性克隆
到一个新对象。这属于浅拷贝。
const clone = Object.create(Object.getPrototypeOf(obj),
Object.getOwnPropertyDescriptors(obj));
//  或者
const shallowClone = (obj) => Object.create(
Object.getPrototypeOf(obj),
Object.getOwnPropertyDescriptors(obj)
);
上面代码会克隆对象 obj  。
另外， Object.getOwnPropertyDescriptors  方法可以实现，一个对象继承另一个对象。以前，继承另一个
对象，常常写成下面这样。
const obj = {
__proto__: prot,
foo: 123,
};
ES6 规定 __proto__  只有浏览器要部署，其他环境不用部署。如果去除 __proto__  ，上面代码就要改成下
面这样。
const obj = Object.create(prot);
obj.foo = 123;
//  或者
const obj = Object.assign(
Object.create(prot),
{
foo: 123,
}
);
有了 Object.getOwnPropertyDescriptors  ，我们就有了另一种写法。
const obj = Object.create(
prot,
Object.getOwnPropertyDescriptors({
foo: 123,
})
);
Object.getOwnPropertyDescriptors  也可以用来实现 Mixin （混入）模式。
let mix = (object) => ({
with: (...mixins) => mixins.reduce(
(c, mixin) => Object.create(
c, Object.getOwnPropertyDescriptors(mixin)
), object)
});
// multiple mixins example
let a = {a: 'a'};
let b = {b: 'b'};
let c = {c: 'c'};
let d = mix(c).with(a, b);
上面代码中，对象 a  和 b  被混入了对象 c  。
出于完整性的考虑， Object.getOwnPropertyDescriptors  进入标准以后，还会
有 Reflect.getOwnPropertyDescriptors  方法