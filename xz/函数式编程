函数式编程
JavaScript 语言从一诞生，就具有函数式编程的烙印。它将函数作为一种独立的数据类型，与其他数据类型处
于完全平等的地位。在 JavaScript 语言中，你可以采用面向对象编程，也可以采用函数式编程。有人甚至
说， JavaScript 是有史以来第一种被大规模采用的函数式编程语言。
ES6 的种种新增功能，使得函数式编程变得更方便、更强大。本章介绍 ES6 如何进行函数式编程。


函数合成
函数合成（ function composition ）指的是，将多个函数合成一个函数。
let add = x => x + x;
let pow = x => x * x;
let inv = x => 1 / x;
let comp = f.comp(add, pow, inv);
comp(1) // 0.25
comp(4) // 0.015625
上面代码中， f.comp  就是函数合成器，它的参数全部都是函数，然后返回一个新的函数。
函数合成的代码如下。
let f = {};
f.comp = (...fs) => {
return (...args) =>
fs.map(
f => args = [f.apply(null, args)]
).pop()[0];
};
上面代码先依次遍历执行 f.comp  方法的参数（即排队执行的各个函数），每一次都将结果 args  变量存
入一个数组。所以，对于 comp(1)  来说，最后结果是 [[1], [0.5], [0.25]]  ，然后再用 pop  方法取出
最后一个元素。

参数倒置
参数倒置（ flip ）指的是改变函数前两个参数的顺序。
var divide = (a, b) => a / b;
var flip = f.flip(divide);
flip(10, 5) // 0.5
flip(1, 10) // 10
var three = (a, b, c) => [a, b, c];
var flip = f.flip(three);
flip(1, 2, 3); // => [2, 1, 3]
上面代码中，如果按照正常的参数顺序， 10 除以 5 等于 2 。但是，参数倒置以后得到的新函数，结果就是 5 除
以 10 ，结果得到 0.5 。如果原函数有 3 个参数，则只颠倒前两个参数的位置。
参数倒置的代码非常简单。
let f = {};
f.flip =
fn =>
(a, b, ...args) => fn(b, a, ...args.reverse());