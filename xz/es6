Proxy 和 Reflect
Proxy 概述
Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种 “ 元编程 ” （ meta
programming ），即对编程语言进行编程。
Proxy 可以理解成，在目标对象之前架设一层 “ 拦截 ” ，外界对该对象的访问，都必须先通过这层拦截，因此提
供了一种机制，可以对外界的访问进行过滤和改写。 Proxy 这个词的原意是代理，用在这里表示由它来 “ 代
理 ” 某些操作，可以译为 “ 代理器 ” 。

var obj = new Proxy({}, {
get: function (target, key, receiver) {
console.log(`getting ${key}!`);
return Reflect.get(target, key, receiver);
},
set: function (target, key, value, receiver) {
console.log(`setting ${key}!`);
return Reflect.set(target, key, value, receiver);
}
});
上面代码对一个空对象架设了一层拦截，重定义了属性的读取（ get  ）和设置（ set  ）行为。这里暂时
先不解释具体的语法，只看运行结果。对设置了拦截行为的对象 obj  ，去读写它的属性，就会得到下面的
结果。
obj.count = 1
// setting count!
++obj.count
// getting count!
// setting count!
// 2
上面代码说明， Proxy 实际上重载（ overload ）了点运算符，即用自己的定义覆盖了语言的原始定义。

ES6 原生提供 Proxy 构造函数，用来生成 Proxy 实例。
var proxy = new Proxy(target, handler);
Proxy 对象的所有用法，都是上面这种形式，不同的只是 handler  参数的写法。其中， new Proxy()  表示
生成一个 Proxy 实例， target 参数表示所要拦截的目标对象， handler  参数也是一个对象，用来定制拦截行
为。
下面是另一个拦截读取属性行为的例子。
var proxy = new Proxy({}, {
get: function(target, property) {
return 35;
}
});
proxy.time // 35
proxy.name // 35
proxy.title // 35

上面代码中，作为构造函数， Proxy 接受两个参数。第一个参数是所要代理的目标对象（上例是一个空对
象），即如果没有 Proxy 的介入，操作原来要访问的就是这个对象；第二个参数是一个配置对象，对于每一个
被代理的操作，需要提供一个对应的处理函数，该函数将拦截对应的操作。比如，上面代码中，配置对象有
一个 get  方法，用来拦截对目标对象属性的访问请求。 get  方法的两个参数分别是目标对象和所要访问
的属性。可以看到，由于拦截函数总是返回 35  ，所以访问任何属性都得到 35  。
注意，要使得 Proxy 起作用，必须针对 Proxy 实例（上例是 proxy 对象）进行操作，而不是针对目标对象（上例
是空对象）进行操作。
如果 handler  没有设置任何拦截，那就等同于直接通向原对象。
var target = {};
var handler = {};
var proxy = new Proxy(target, handler);
proxy.a = 'b';
target.a // "b"
上面代码中， handler  是一个空对象，没有任何拦截效果，访问 handeler  就等同于访问 target  。
一个技巧是将 Proxy 对象，设置到 object.proxy  属性，从而可以在 object  对象上调用。
var object = { proxy: new Proxy(target, handler) };
Proxy 实例也可以作为其他对象的原型对象。
var proxy = new Proxy({}, {
get: function(target, property) {
return 35;
}
});
let obj = Object.create(proxy);
obj.time // 35
上面代码中， proxy  对象是 obj  对象的原型， obj  对象本身并没有 time  属性，所以根据原型链，会
在 proxy  对象上读取该属性，导致被拦截。
同一个拦截器函数，可以设置拦截多个操作。
var handler = {
get: function(target, name) {
if (name === 'prototype') return Object.prototype;
return 'Hello, ' + name;
},
apply: function(target, thisBinding, args) { return args[0]; },
construct: function(target, args) { return args[1]; }
};
var fproxy = new Proxy(function(x, y) {
return x + y;
}, handler);
fproxy(1,2); // 1
new fproxy(1,2); // 2
fproxy.prototype; // Object.prototype
fproxy.foo; // 'Hello, foo'
下面是 Proxy 支持的拦截操作一览。
对于可以设置、但没有设置拦截的操作，则直接落在目标对象上，按照原先的方式产生结果。
（ 1 ） get(target, propKey, receiver)
拦截对象属性的读取，比如 proxy.foo  和 proxy['foo']  ，返回类型不限。最后一个参数 receiver  可
选，当 target  对象设置了 propKey  属性的 get  函数时， receiver  对象会绑定 get  函数
的 this  对象。
（ 2 ） set(target, propKey, value, receiver)
拦截对象属性的设置，比如 proxy.foo = v  或 proxy['foo'] = v  ，返回一个布尔值。
（ 3 ） has(target, propKey)
拦截 propKey in proxy  的操作，返回一个布尔值。
（ 4 ） deleteProperty(target, propKey)
拦截 delete proxy[propKey]  的操作，返回一个布尔值。
（ 5 ） enumerate(target)
拦截 for (var x in proxy)  ，返回一个遍历器。
（ 6 ） ownKeys(target)
拦
截 Object.getOwnPropertyNames(proxy)  、 Object.getOwnPropertySymbols(proxy)  、 Object.keys(pr
oxy)  ，返回一个数组。该方法返回对象所有自身的属性，而 Object.keys()  仅返回对象可遍历的属性。
（ 7 ） getOwnPropertyDescriptor(target, propKey)
拦截 Object.getOwnPropertyDescriptor(proxy, propKey)  ，返回属性的描述对象。
（ 8 ） defineProperty(target, propKey, propDesc)
拦截 Object.defineProperty(proxy, propKey, propDesc ） 、 Object.defineProperties(proxy,
propDescs)  ，返回一个布尔值。
（ 9 ） preventExtensions(target)
拦截 Object.preventExtensions(proxy)  ，返回一个布尔值。
（ 10 ） getPrototypeOf(target)
拦截 Object.getPrototypeOf(proxy)  ，返回一个对象。
（ 11 ） isExtensible(target)
拦截 Object.isExtensible(proxy)  ，返回一个布尔值。
（ 12 ） setPrototypeOf(target, proto)
拦截 Object.setPrototypeOf(proxy, proto)  ，返回一个布尔值。
如果目标对象是函数，那么还有两种额外操作可以拦截。
（ 13 ） apply(target, object, args)
拦截 Proxy 实例作为函数调用的操作，比如 proxy(...args)  、 proxy.call(object,
...args)  、 proxy.apply(...)  。
（ 14 ） construct(target, args, proxy)
拦截 Proxy 实例作为构造函数调用的操作，比如 new proxy(...args)


Proxy 实例的方法
下面是上面这些拦截方法的详细介绍。

get()
get  方法用于拦截某个属性的读取操作。上文已经有一个例子，下面是另一个拦截读取操作的例子。
var person = {
name: " 张三 "
};
var proxy = new Proxy(person, {
get: function(target, property) {
if (property in target) {
return target[property];
} else {
throw new ReferenceError("Property \"" + property + "\" does not exist.");
}
}
});
proxy.name // " 张三 "
proxy.age //  抛出一个错误
上面代码表示，如果访问目标对象不存在的属性，会抛出一个错误。如果没有这个拦截函数，访问不存在的
属性，只会返回 undefined  。

get  方法可以继承。
let proto = new Proxy({}, {
get(target, propertyKey, receiver) {
console.log('GET '+propertyKey);
return target[propertyKey];
}
});
let obj = Object.create(proto);
obj.xxx // "GET xxx"
上面代码中，拦截操作定义在 Prototype 对象上面，所以如果读取 obj  对象继承的属性时，拦截会生效。
下面的例子使用 get  拦截，实现数组读取负数的索引。

function createArray(...elements) {
let handler = {
get(target, propKey, receiver) {
let index = Number(propKey);
if (index < 0) {
propKey = String(target.length + index);
}
return Reflect.get(target, propKey, receiver);
}
};
let target = [];
target.push(...elements);
return new Proxy(target, handler);
}
let arr = createArray('a', 'b', 'c');
arr[-1] // c
上面代码中，数组的位置参数是 -1  ，就会输出数组的倒数最后一个成员
利用 Proxy ，可以将读取属性的操作（ get  ），转变为执行某个函数，从而实现属性的链式操作。
var pipe = (function () {
return function (value) {
var funcStack = [];
var oproxy = new Proxy({} , {
get : function (pipeObject, fnName) {
if (fnName === 'get') {
return funcStack.reduce(function (val, fn) {
return fn(val);
},value);
}
funcStack.push(window[fnName]);
return oproxy;
}
});
return oproxy;
}
}());
var double = n => n * 2;
var pow = n => n * n;
var reverseInt = n => n.toString().split("").reverse().join("") | 0;
pipe(3).double.pow.reverseInt.get; // 63
上面代码设置 Proxy 以后，达到了将函数名链式使用的效果。
下面的例子则是利用 get  拦截，实现一个生成各种 DOM 节点的通用函数 dom  。